#!/usr/local/bin/bash

# setup
# create temp files for auth
up_file=$(mktemp)
otp_file=$(mktemp)
# set full path to openvpn client
openvpn="$(brew --prefix openvpn)/sbin/openvpn"
# save requested VPN in sensible var name
title=$1

# check to see if `op` is already authed. If not then signin
# there is no "status" check. Have to do query and check return code
if [[ ! $(op get item "$title") ]]; then
  eval "$(op signin)"
fi;
# get the full "blob" back from 1Password and save it
item=$(op get item "$title")

# extract fields from 1Password blob
user=$(echo "$item" | jq -r ".details.fields | .[] | select(.designation == \"username\") | .value")
password=$(echo "$item" | jq -r ".details.fields | .[] | select(.designation == \"password\") | .value")
vpn_config=$(echo "$item" | jq -r ".details.sections | .[] | select(.title==\"OP-VPN\") | .fields[] | select(.t==\"config\") | .v")

# write auth file
echo "$user" > "$up_file"
echo "$password" >> "$up_file"

# initial login will fail. The "AUTH_FAILED" line contains the session_id
# to be used with OTP based auth
get_session_id=$(sudo "$openvpn" --config "$vpn_config" --auth-user-pass "$up_file" | grep AUTH_FAILED)

# extract session_id and get OTP from 1Password
session_id=$(echo "$get_session_id" | cut -d':' -f7)
otp=$(op get totp "$title")

# write auth file
echo "$user" > "$otp_file"
echo "CRV1::$session_id::$otp" >> "$otp_file"

# do final login and wait until login is complete (can take a few seconds)
# before progressing
while read -r line; do
  if [ -z "${line##*dhcp-option DNS*}" ]; then
    echo "$line"
  fi
  [ -z "${line##*Initialization Sequence Completed*}" ] && break;
done < <(sudo "$openvpn" \
          --config "$vpn_config" \
          --auth-user-pass "$otp_file")

# delete temp auth files
rm -rf "$up_file"
rm -rf "$otp_file"
echo

# sudo pkill -f "sudo $(brew --prefix openvpn)"
